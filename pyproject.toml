[build-system]
requires = ["setuptools>=64"]
build-backend = "setuptools.build_meta"

[project]
name = "esp-coredump"
authors = [{name = "Espressif Systems"}]
license = {text = "Apache 2.0"}
description = "Generate core dumps on unrecoverable software errors"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Environment :: Console",
    "Topic :: Software Development :: Embedded Systems",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: Apache Software License",
]
requires-python = ">=3.7"
dynamic = ['version']
dependencies = [
    "construct~=2.10",
    "pygdbmi>=0.9.0.2",
    "esptool",
]

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.urls]
Homepage = "https://github.com/espressif/esp-coredump"

[project.optional-dependencies]
dev = [
    "pre-commit",
    "commitizen",
    "czespressif>=1.3.1",
]
test = [
    "coverage[toml]",
    "pytest",
]

[project.scripts]
esp-coredump = "esp_coredump.__main__:main"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages]
find = {namespaces = false}

[tool.setuptools.dynamic]
version = {attr = "esp_coredump.__version__"}

[tool.commitizen]
name = "czespressif"
version = "1.13.1"
update_changelog_on_bump = true
tag_format = "v$version"
changelog_merge_prerelease = true
annotated_tag = true
changelog_start_rev = "v1.4.2"
bump_message = "change: Update version to $new_version"
version_files = [
    "esp_coredump/__init__.py:__version__"
]

[tool.mypy]
    disallow_incomplete_defs = false # Disallows defining functions with incomplete type annotations
    disallow_untyped_defs    = false # Disallows defining functions without type annotations or with incomplete type annotations
    ignore_missing_imports   = true  # Suppress error messages about imports that cannot be resolved
    python_version           = "3.9" # Specifies the Python version used to parse and check the target program
    warn_no_return           = true  # Shows errors for missing return statements on some execution paths
    warn_return_any          = true  # Shows a warning when returning a value with type Any from a function declared with a non- Any return type

[tool.coverage.run]
    parallel = true
    source = ["esp_coredump/"]
[tool.coverage.report]
    omit = ["esp_coredump/corefile/_parse_soc_header.py"]  # ignore helper script
    exclude_also = [
        "def __repr__",
        "def _type_str",
        "@(abc\\.)?abstractmethod",
        "raise NotImplementedError",
    ]

[tool.pytest.ini_options]
    addopts = "-vs"
